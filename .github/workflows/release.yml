name: Release Pipeline

on:
  push:
    tags: ["v*"]

jobs:
  style:
    uses: ./.github/workflows/style.yml

  test:
    needs: [style]
    uses: ./.github/workflows/test.yml

  build:
    needs: [test]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python environment
        uses: ./.github/actions/setup-python

      - name: Build dcspy
        uses: ./.github/actions/build-app

      - uses: actions/upload-artifact@v3
        with:
          name: dcspy_binaries
          path: dist/

  release:
    needs: [build]
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dcspy_binaries

      - name: "Get Version"
        id: version
        env:
          TAG_NAME: ${{ github.ref }}
        run: |
          Get-ChildItem -Recurse -Depth 1
          Rename-Item -Path dcs_py.exe -NewName dcs_py_$env:GITHUB_REF_NAME.exe
          Rename-Item -Path dcs_py_cli.exe -NewName dcs_py_cli_$env:GITHUB_REF_NAME.exe
          $version = ($env:TAG_NAME -split "/") | Select-Object -Last 1
          $prerelease = ("2.1.1-alpha3" -match '[^\.\d]').ToString().ToLower()
          Write-Host $version
          Write-Host $prerelease
          Write-Output "::set-output name=number::$version"
          Write-Output "::set-output name=prerelease::$prerelease"
          $changelog = Get-Content .\CHANGELOG.md
          $last_change = ($changelog | Select-String -Pattern "^##\s" | Select-Object -Skip 1 -First 1).LineNumber - 2
          ($changelog | Select-Object -First $last_change) -join "`n" | Out-File .\releasenotes.md
#          Compress-Archive -Path .\dcspy_binaries -DestinationPath "dcs_py.$version.zip" -Compression Optimal

      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PYI_REL_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: releasenotes.md
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PYI_REL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dcs_py_${{ steps.version.outputs.number }}.exe
          asset_name: dcs_py_${{ steps.version.outputs.number }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PYI_REL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dcs_py_cli_${{ steps.version.outputs.number }}.exe
          asset_name: dcs_py_cli_${{ steps.version.outputs.number }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PYI_REL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dcspy-${{ steps.version.outputs.number }}-py3-none-any.whl
          asset_name: dcspy-${{ steps.version.outputs.number }}-py3-none-any.whl
          asset_content_type: application/x-wheel+zip

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PYI_REL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dcspy-${{ steps.version.outputs.number }}.tar.gz
          asset_name: dcspy-${{ steps.version.outputs.number }}.tar.gz
          asset_content_type: application/tar+gzip/

  pypi:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools twine
          pip install -Ur requirements.txt

      - uses: actions/download-artifact@v3
        with:
          name: dcspy_binaries

      - name: Publish a Python distribution to PyPI
        run: |
          ls -laR

#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_TOKEN }}
#          skip_existing: true
#          verbose: true
